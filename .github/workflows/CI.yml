name: Java CI with Maven

on:
  workflow_dispatch:
  #push:
    #branches: [ feature ]


jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'adopt'
          cache: maven

      - name: Build with Maven Wrapper
        run: mvn clean install -DskipTests  # Pass -DskipTests to skip tests

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Check SonarQube Quality Gate
        run: |
         sleep 20
          STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }} "http://172.203.224.21:9002/api/qualitygates/project_status?projectKey=PetClinic" | jq -r '.projectStatus.status')
          echo "Quality Gate Status: $STATUS"
          if [ "$STATUS" != "OK" ]; then
            echo "SonarQube Quality Gate failed"
            exit 1
          fi      
      - name: Install Syft
        run: |
          curl -sSL https://github.com/anchore/syft/releases/download/v0.66.0/syft_0.66.0_linux_amd64.tar.gz | tar xz -C /usr/local/bin syft

      - name: Generate SBOM with Syft
        run: |
          syft dir:. -o cyclonedx-json > sbom.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom
          path: sbom.json
      - name: Build Docker Image
        run: ./mvnw spring-boot:build-image

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.CR_Username }}
          password: ${{ secrets.CR_Password }}
          registry: ghcr.io

      - name: Push Docker Image
        run: |
          docker tag ${project.groupId}/${project.artifactId}:${project.version} ghcr.io/${{ github.repository }}/${project.name}:latest
          docker push ghcr.io/${{ github.repository }}/${project.name}:latest

